#!/usr/bin/env python3
## Maintainer : @T-Dynamos
import os
import json
import sys

filename = os.path.basename(sys.argv[0])

usage = f"""
Usage:

{filename} <package> ...            

Add or increment TERMUX_PKG_REVISION of package. 


{filename} --dependencies  <package>    

Add or increment TERMUX_PKG_REVISION of all the packages that have <package> in TERMUX_PKG_DEPENDS or in TERMUX_PKG_BUILD_DEPENDS
"""

REPO_PATH = os.path.join("/".join(os.path.realpath(sys.argv[0]).split("/")[:-3]), "repo.json")
FOLDERS = [os.path.join("/".join(os.path.realpath(sys.argv[0]).split("/")[:-3]),folder) for folder in list(json.load(open(REPO_PATH)).keys())]


def is_dep(DEP: str, line: str) -> bool:
    """
    Checks if the dep is in line
    """
    tmp_deps = line.split("=")[1]
    if tmp_deps.startswith('"'):
        deps = [dep.strip() for dep in tmp_deps.split('"')[1].split(",")]
    elif tmp_deps.startswith("'"):
        deps = [dep.strip() for dep in tmp_deps.split("'")[1].split(",")]
    else:
        deps = [tmp_deps]

    return DEP in deps


def get_build_dependent_files(folders: list, DEP: str) -> list:
    """
    Gets all the packages that depend on some package
    """
    build_files = []
    for d in folders:
        for folder in os.listdir(d):
            if os.path.exists(os.path.join(d, folder, "build.sh")):
                with open(os.path.join(d, folder, "build.sh"), "r") as file:
                    build_files.extend(
                        os.path.join(d, folder, "build.sh")
                        for line in file.read().split("\n")
                        if (
                            line.startswith("TERMUX_PKG_DEPENDS")
                            or line.startswith("TERMUX_PKG_BUILD_DEPENDS")
                        )
                        and is_dep(DEP, line)
                    )
                    file.close()
    return build_files


def bump_revision(file: str) -> None:
    """
    Bumps version in file
    """
    with open(file, "r") as opened_file:
        file_read = opened_file.read().split("\n")
        revision = 0

        if "TERMUX_PKG_REVISION" in "\n".join(file_read):
            for line in file_read:
                if line.startswith("TERMUX_PKG_REVISION"):
                    revision = line.split("=")[-1]
                    if revision.startswith('"'):
                        revision = revision.split('"')[1]
                    revision = int(revision) + 1
                    file_read[file_read.index(line)] = (
                        line.split("=")[0] + "=" + str(revision)
                        )
                    break

        else:
            for line in file_read:
                if line.startswith("TERMUX_PKG_VERSION"):
                    file_read.insert(file_read.index(line) + 1, "TERMUX_PKG_REVISION=1")
                    revision = 1
                    break

    with open(file,"w") as opened_file:
        opened_file.write("\n".join(file_read))
    print(f"{revision - 1} -> {revision} {file}")


def locate_dir(file: str) -> str:
    """
    Finds package in repo
    """
    for repo in FOLDERS:
        if file in os.listdir(repo):
            file_final = f"{repo}/{file}/build.sh"
            return (
                file_final
                if os.path.exists(file_final)
                else exit(f"Error : File {file_final} does not exists!")
            )
    return exit(f"Package {file} not found")


def parse_args() -> None:
    if len(sys.argv) == 1 or sys.argv[1] in ["--help", "-h"]:
        print(usage)
        exit(0)

    if sys.argv[1] in ["--dependencies", "-d"] and len(sys.argv) > 2:
        build_files = get_build_dependent_files(FOLDERS, os.path.basename(sys.argv[2]))
        print(f"Bumping all {len(build_files)} files", end="\n\n")
        for files in build_files:
            bump_revision(files)
        exit(0)

    if len(sys.argv) >= 2 and sys.argv[1] not in ["--dependencies", "-d"]:
        print(f"Bumping {len(sys.argv[1:])} packages", end="\n\n")
        packages = sys.argv[1:]
        for package in packages:
            bump_revision(locate_dir((
                    os.path.basename(package[:-1]) if package[-1] == "/" else os.path.basename(package)
                    ) if "/" in package else package))
    else:
        print(usage)

    exit(0)


if __name__ == "__main__":
    parse_args()
